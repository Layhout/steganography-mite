# import base64


# encoded_bytes = base64.b64encode('123'.encode('utf-8'))
# encoded_str = encoded_bytes.decode('utf-8')
# print(encoded_str)
# decoded_bytes = base64.b64decode(encoded_str.encode('utf-8'))
# decoded_string = decoded_bytes.decode('utf-8')
# print("Decoded:", decoded_string)


# Encode
# original_string = "Encode this text"
# encoded_bytes = base64.b64encode(original_string.encode("utf-8"))
# encoded_str = encoded_bytes.decode("utf-8")
# print("Encoded string:", encoded_str)

# # Decode
# decoded_bytes = base64.b64decode(encoded_str.encode("utf-8"))
# decoded_string = decoded_bytes.decode("utf-8")
# print("Decoded string:", decoded_string)

# AES 256 encryption/decryption using pycrypto library

import base64
import hashlib
from Crypto.Cipher import AES
import os


# pad with spaces at the end of the text
# beacuse AES needs 16 byte blocks
def pad(s) -> str:
    block_size = 16
    remainder = len(s) % block_size
    padding_needed = block_size - remainder
    return s + padding_needed * " "


# remove the extra spaces at the end


def unpad(s):
    return s.rstrip()


def encrypt(plain_text: str, password: str):
    # generate a random salt
    salt = os.urandom(AES.block_size)

    # generate a random iv
    # iv = Random.new().read(AES.block_size)

    # use the Scrypt KDF to get a private key from the password
    private_key = hashlib.scrypt(
        password.encode(), salt=salt, n=2**14, r=8, p=1, dklen=32
    )

    # pad text with spaces to be valid for AES CBC mode
    padded_text = pad(''.join([' ' for _ in range(16)]) + plain_text)

    # create cipher config
    cipher_config = AES.new(private_key, AES.MODE_CBC)

    # return a dictionary with the encrypted text
    return {
        "cipher_text": base64.b64encode(
            cipher_config.encrypt(padded_text.encode())
        ).decode(),
        "salt": base64.b64encode(salt),
        # "iv": base64.b64encode(iv),
    }


def decrypt(enc_dict, password: str):
    # decode the dictionary entries from base64
    salt = base64.b64decode(enc_dict["salt"])
    enc = base64.b64decode(enc_dict["cipher_text"])
    # iv = enc[:16]
    # enc = enc[16:]

    # generate the private key from the password and salt
    private_key = hashlib.scrypt(
        password.encode(), salt=salt, n=2**14, r=8, p=1, dklen=32
    )

    # create the cipher config
    cipher = AES.new(private_key, AES.MODE_CBC)

    # decrypt the cipher text
    decrypted = cipher.decrypt(enc)

    # unpad the text to remove the added spaces
    original = unpad(decrypted)
    # original = decrypted

    return original[16:]


def main():
    # password = input("Password: ")
    password = "password"

    # First let us encrypt secret message
    encrypted = encrypt(
        """Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.""",
        password,
    )

    print(encrypted)

    # Let us decrypt using our original password
    decrypted = decrypt(encrypted, password)
    print(bytes.decode(decrypted))


main()
